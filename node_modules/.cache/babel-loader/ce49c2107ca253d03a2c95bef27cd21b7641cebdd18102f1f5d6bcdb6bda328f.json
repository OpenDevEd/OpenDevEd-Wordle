{"ast":null,"code":"var _jsxFileName = \"/home/merouane/Desktop/wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = '/words.json';\nconst WORD_LENGHT = 5;\nfunction App() {\n  _s();\n  const [solution, setSolution] = useState('');\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setcurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  useEffect(() => {\n    const handleType = event => {\n      if (isGameOver) {\n        return;\n      }\n      if (event.key === 'Enter') {\n        if (currentGuess.length !== 5) {\n          return;\n        }\n        const isCorrect = solution === currentGuess;\n        if (isCorrect) {\n          setIsGameOver(true);\n        }\n      }\n      if (currentGuess.l) setcurrentGuess(currentGuess + event.key);\n    };\n    window.addEventListener('keydown', handleType);\n    return () => window.addEventListener('keydown', handleType);\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(API_URL);\n      const words = await response.json();\n      const randomword = words[Math.floor(Math.random() * words.length)];\n      setSolution(randomword);\n      console.log(words);\n    };\n    fetchWords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [guesses.map((guess, i) => {\n      const iscurrentGess = i === guesses.findIndex(val => val == null);\n      return /*#__PURE__*/_jsxDEV(Line, {\n        guess: iscurrentGess ? currentGuess : guess !== null && guess !== void 0 ? guess : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this);\n    }), currentGuess]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Zhx5Wcf2A4IP5SEFul7lO2++8Tw=\");\n_c = App;\nexport default App;\nfunction Line({\n  guess\n}) {\n  const tiles = [];\n  for (let i = 0; i < WORD_LENGHT; i++) {\n    const char = guess[i];\n    tiles.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile\",\n      children: char\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 16\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\",\n    children: tiles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Line;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Line\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","API_URL","WORD_LENGHT","App","_s","solution","setSolution","guesses","setGuesses","Array","fill","currentGuess","setcurrentGuess","isGameOver","setIsGameOver","handleType","event","key","length","isCorrect","l","window","addEventListener","fetchWords","response","fetch","words","json","randomword","Math","floor","random","console","log","className","children","map","guess","i","iscurrentGess","findIndex","val","Line","fileName","_jsxFileName","lineNumber","columnNumber","_c","tiles","char","push","_c2","$RefreshReg$"],"sources":["/home/merouane/Desktop/wordle/src/App.js"],"sourcesContent":["import './App.css'\nimport { useEffect, useState } from 'react'\n\nconst API_URL = '/words.json';\nconst WORD_LENGHT = 5;\n\nfunction App() {\n  const [solution, setSolution] = useState('');\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setcurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  useEffect(() => {\n    const handleType = (event) => {\n\n      if (isGameOver) {\n        return;\n      }\n\n      if (event.key === 'Enter') {\n        if (currentGuess.length !== 5) {\n          return ;\n        }\n        const isCorrect = solution === currentGuess;\n        if (isCorrect) {\n          setIsGameOver(true);\n        }\n      }\n      if (currentGuess.l)\n\n      setcurrentGuess(currentGuess + event.key);\n    };\n\n    window.addEventListener('keydown', handleType);\n\n    return () => window.addEventListener('keydown', handleType);\n  });\n  \n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(API_URL);\n      const words = await response.json();\n      const randomword = words[Math.floor(Math.random() * words.length)];\n      setSolution(randomword);\n      console.log(words);\n    };\n    \n    fetchWords();\n  }, []);\n  \n  return (\n    <div className=\"board\">\n      {\n        guesses.map((guess, i) => {\n          const iscurrentGess = i === guesses.findIndex(val => val == null);\n          return (\n            <Line guess={iscurrentGess ? currentGuess : guess ?? ''} />\n          );\n        })}\n        {currentGuess}\n    </div>\n  );\n}\n\nexport default App;\n\n\nfunction Line({guess}) {\n  const tiles = [];\n  \n  for (let i = 0; i < WORD_LENGHT; i++) {\n    const char = guess[i];\n    tiles.push(<div key={i} className='tile'>{char}</div>)\n  }\n  return <div className='line'>{tiles}</div>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}