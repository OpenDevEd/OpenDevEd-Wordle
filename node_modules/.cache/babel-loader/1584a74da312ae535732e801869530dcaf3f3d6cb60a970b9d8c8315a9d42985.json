{"ast":null,"code":"// utils/gameLogic.js\nconst WORD_LIST = ['react', 'state', 'props', 'hooks', 'redux', 'async', 'await', 'fetch', 'axios', 'route', 'modal', 'style', 'class', 'event', 'input'];\nexport function generateRandomWord() {\n  return WORD_LIST[Math.floor(Math.random() * WORD_LIST.length)];\n}\nexport function checkGuess(guess, targetWord) {\n  const result = new Array(5).fill({\n    char: '',\n    result: 'absent'\n  });\n  const targetChars = targetWord.split('');\n\n  // First pass: check for correct letters in correct positions\n  for (let i = 0; i < 5; i++) {\n    if (guess[i] === targetWord[i]) {\n      result[i] = {\n        char: guess[i],\n        result: 'correct'\n      };\n      targetChars[i] = null;\n    }\n  }\n\n  // Second pass: check for correct letters in wrong positions\n  for (let i = 0; i < 5; i++) {\n    if (result[i].result === 'absent') {\n      const index = targetChars.indexOf(guess[i]);\n      if (index !== -1) {\n        result[i] = {\n          char: guess[i],\n          result: 'present'\n        };\n        targetChars[index] = null;\n      } else {\n        result[i] = {\n          char: guess[i],\n          result: 'absent'\n        };\n      }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["WORD_LIST","generateRandomWord","Math","floor","random","length","checkGuess","guess","targetWord","result","Array","fill","char","targetChars","split","i","index","indexOf"],"sources":["/home/merouane/Desktop/wordle/src/utils/gameLogic.js"],"sourcesContent":["// utils/gameLogic.js\nconst WORD_LIST = [\n    'react', 'state', 'props', 'hooks', 'redux',\n    'async', 'await', 'fetch', 'axios', 'route',\n    'modal', 'style', 'class', 'event', 'input'\n  ];\n  \n  export function generateRandomWord() {\n    return WORD_LIST[Math.floor(Math.random() * WORD_LIST.length)];\n  }\n  \n  export function checkGuess(guess, targetWord) {\n    const result = new Array(5).fill({ char: '', result: 'absent' });\n    const targetChars = targetWord.split('');\n  \n    // First pass: check for correct letters in correct positions\n    for (let i = 0; i < 5; i++) {\n      if (guess[i] === targetWord[i]) {\n        result[i] = { char: guess[i], result: 'correct' };\n        targetChars[i] = null;\n      }\n    }\n  \n    // Second pass: check for correct letters in wrong positions\n    for (let i = 0; i < 5; i++) {\n      if (result[i].result === 'absent') {\n        const index = targetChars.indexOf(guess[i]);\n        if (index !== -1) {\n          result[i] = { char: guess[i], result: 'present' };\n          targetChars[index] = null;\n        } else {\n          result[i] = { char: guess[i], result: 'absent' };\n        }\n      }\n    }\n  \n    return result;\n  }"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,CACd,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC3C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC3C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAC5C;AAED,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnC,OAAOD,SAAS,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAAC;AAChE;AAEA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAEC,UAAU,EAAE;EAC5C,MAAMC,MAAM,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;IAAEC,IAAI,EAAE,EAAE;IAAEH,MAAM,EAAE;EAAS,CAAC,CAAC;EAChE,MAAMI,WAAW,GAAGL,UAAU,CAACM,KAAK,CAAC,EAAE,CAAC;;EAExC;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIR,KAAK,CAACQ,CAAC,CAAC,KAAKP,UAAU,CAACO,CAAC,CAAC,EAAE;MAC9BN,MAAM,CAACM,CAAC,CAAC,GAAG;QAAEH,IAAI,EAAEL,KAAK,CAACQ,CAAC,CAAC;QAAEN,MAAM,EAAE;MAAU,CAAC;MACjDI,WAAW,CAACE,CAAC,CAAC,GAAG,IAAI;IACvB;EACF;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIN,MAAM,CAACM,CAAC,CAAC,CAACN,MAAM,KAAK,QAAQ,EAAE;MACjC,MAAMO,KAAK,GAAGH,WAAW,CAACI,OAAO,CAACV,KAAK,CAACQ,CAAC,CAAC,CAAC;MAC3C,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBP,MAAM,CAACM,CAAC,CAAC,GAAG;UAAEH,IAAI,EAAEL,KAAK,CAACQ,CAAC,CAAC;UAAEN,MAAM,EAAE;QAAU,CAAC;QACjDI,WAAW,CAACG,KAAK,CAAC,GAAG,IAAI;MAC3B,CAAC,MAAM;QACLP,MAAM,CAACM,CAAC,CAAC,GAAG;UAAEH,IAAI,EAAEL,KAAK,CAACQ,CAAC,CAAC;UAAEN,MAAM,EAAE;QAAS,CAAC;MAClD;IACF;EACF;EAEA,OAAOA,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}