{"ast":null,"code":"var _jsxFileName = \"/home/merouane/Desktop/wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = '/words.json';\nconst WORD_LENGHT = 5;\nfunction App() {\n  _s();\n  const [solution, setSolution] = useState('');\n  const [arr, setArr] = useState([]);\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setcurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  useEffect(() => {\n    const handleType = event => {\n      if (isGameOver) {\n        return;\n      }\n      if (event.key === 'Enter') {\n        if (currentGuess.length !== 5) {\n          return;\n        }\n        const isCorrect = solution === currentGuess;\n        if (isCorrect) {\n          setIsGameOver(true);\n          // setSolution('')\n          console.log('correct+++++');\n        }\n      }\n      if (event.key === 'Backspace') {\n        setcurrentGuess(currentGuess.slice(0, -1));\n        return;\n      }\n      if (currentGuess.length >= 5) {\n        return;\n      }\n      setcurrentGuess(currentGuess + event.key);\n    };\n    window.addEventListener('keydown', handleType);\n    return () => window.addEventListener('keydown', handleType);\n  }, [currentGuess]);\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(API_URL);\n      if (!response.ok) {\n        throw new Error('response was not ok');\n      }\n      const words = await response.json();\n      console.log('word: ', words[1]);\n      const randomword = words[Math.floor(Math.random() % words.length)];\n      setSolution(randomword);\n      // console.log(words);\n    };\n    fetchWords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", solution, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), guesses.map((guess, i) => {\n        const iscurrentGess = i === guesses.findIndex(val => val == null);\n        return /*#__PURE__*/_jsxDEV(Line, {\n          guess: iscurrentGess ? currentGuess : guess !== null && guess !== void 0 ? guess : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      }), currentGuess]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fViQ8tKLXk1bFlGFk6iTPb1+EPE=\");\n_c = App;\nexport default App;\nfunction Line({\n  guess\n}) {\n  const tiles = [];\n  for (let i = 0; i < WORD_LENGHT; i++) {\n    const char = guess[i];\n    tiles.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile\",\n      children: char\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 16\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\",\n    children: tiles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Line;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Line\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","API_URL","WORD_LENGHT","App","_s","solution","setSolution","arr","setArr","guesses","setGuesses","Array","fill","currentGuess","setcurrentGuess","isGameOver","setIsGameOver","handleType","event","key","length","isCorrect","console","log","slice","window","addEventListener","fetchWords","response","fetch","ok","Error","words","json","randomword","Math","floor","random","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","i","iscurrentGess","findIndex","val","Line","_c","tiles","char","push","_c2","$RefreshReg$"],"sources":["/home/merouane/Desktop/wordle/src/App.js"],"sourcesContent":["import './App.css'\nimport { useEffect, useState } from 'react'\n\nconst API_URL = '/words.json';\nconst WORD_LENGHT = 5;\n\nfunction App() {\n  const [solution, setSolution] = useState('');\n  const [arr, setArr] = useState([]);\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setcurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  useEffect(() => {\n    const handleType = (event) => {\n\n      if (isGameOver) {\n        return;\n      }\n\n      if (event.key === 'Enter') {\n        if (currentGuess.length !== 5) {\n          return ;\n        }\n        const isCorrect = solution === currentGuess;\n        if (isCorrect) {\n          setIsGameOver(true);\n          // setSolution('')\n          console.log('correct+++++');\n        }\n      }\n\n      if (event.key === 'Backspace') {\n        setcurrentGuess(currentGuess.slice(0, -1));\n        return ;\n      }\n\n      if (currentGuess.length >= 5) {\n        return;\n      }\n\n      setcurrentGuess(currentGuess + event.key);\n    };\n\n    window.addEventListener('keydown', handleType);\n\n    return () => window.addEventListener('keydown', handleType);\n  }, [currentGuess]);\n  \n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(API_URL);\n      if (!response.ok) {\n        throw new Error('response was not ok');\n      }\n      const words = await response.json();\n      console.log('word: ', words[1]);\n      const randomword = words[Math.floor(Math.random() % words.length)];\n      setSolution(randomword);\n      // console.log(words);\n    };\n    \n    fetchWords();\n  }, []);\n  \n  return (\n    <body>\n    <div className=\"board\">\n    <h1> {solution} </h1>\n      {\n        guesses.map((guess, i) => {\n          const iscurrentGess = i === guesses.findIndex(val => val == null);\n          return (\n            <Line guess={iscurrentGess ? currentGuess : guess ?? ''} />\n          );\n        })}\n        {currentGuess}\n    </div>\n\n    </body>\n  );\n}\n\nexport default App;\n\n\nfunction Line({guess}) {\n  const tiles = [];\n  \n  for (let i = 0; i < WORD_LENGHT; i++) {\n    const char = guess[i];\n    tiles.push(<div key={i} className='tile'>{char}</div>)\n  }\n  return <div className='line'>{tiles}</div>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}