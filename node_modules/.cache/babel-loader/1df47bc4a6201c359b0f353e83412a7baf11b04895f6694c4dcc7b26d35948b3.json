{"ast":null,"code":"var _jsxFileName = \"/home/lsemlali/opendeved-wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport words from \"./words.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_SIZE = 5;\nlet currentIndex = 0;\nconst currentGuess = \"\";\nconst randomIndex = Math.floor(Math.random() * words.length);\nconst wordToGuess = words[randomIndex];\nconsole.log(wordToGuess);\nfunction App() {\n  _s();\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Wordle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), guesses.map(guess => {\n      return /*#__PURE__*/_jsxDEV(Line, {\n        guess: guess !== null && guess !== void 0 ? guess : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"input\", {\n      onKeyDown: e => {\n        if (e.key == 'Enter') {\n          let newGuesses = [...guesses];\n          setGuesses[currentIndex] = 'hello';\n          currentIndex++;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BuLEDLg0oPI2oKOJ+BGHmnOwwNU=\");\n_c = App;\nfunction Line({\n  guess\n}) {\n  let char = '';\n  let boxes = [];\n  for (let i = 0; i < WORD_SIZE; i++) {\n    char = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: guess[i]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n    boxes.push(char);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\",\n    children: boxes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Line;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Line\");","map":{"version":3,"names":["useState","words","jsxDEV","_jsxDEV","WORD_SIZE","currentIndex","currentGuess","randomIndex","Math","floor","random","length","wordToGuess","console","log","App","_s","guesses","setGuesses","Array","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","Line","onKeyDown","e","key","newGuesses","_c","char","boxes","i","push","_c2","$RefreshReg$"],"sources":["/home/lsemlali/opendeved-wordle/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport words from \"./words.json\"\nimport './App.css';\n\nconst WORD_SIZE = 5;\nlet currentIndex = 0;\nconst currentGuess = \"\";\nconst randomIndex = Math.floor(Math.random() * words.length);\nconst wordToGuess = words[randomIndex];\nconsole.log(wordToGuess)\nfunction App() {\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n\n  return (\n    <div className=\"App\">\n      <h1 className='title'>Wordle</h1>\n      {\n        guesses.map(guess => {\n          return <Line guess={guess ?? ''}/>\n        })\n      }\n      <input onKeyDown={(e) => {\n          if (e.key == 'Enter') {\n            let newGuesses = [...guesses]\n            setGuesses[currentIndex] = 'hello';\n            currentIndex++;\n          }\n        }}></input>\n    </div>\n  );\n}\n\nfunction Line({ guess }) {\n  let char = ''\n  let boxes = []\n  for (let i = 0; i < WORD_SIZE; i++) {\n    char = <div className='box'>{guess[i]}</div>;\n    boxes.push(char);\n  }\n\n  return <div className='line'>{boxes}</div>\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,cAAc;AAChC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,SAAS,GAAG,CAAC;AACnB,IAAIC,YAAY,GAAG,CAAC;AACpB,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,KAAK,CAACU,MAAM,CAAC;AAC5D,MAAMC,WAAW,GAAGX,KAAK,CAACM,WAAW,CAAC;AACtCM,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;AACxB,SAASG,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAACmB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAE3D,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAIkB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE/BT,OAAO,CAACU,GAAG,CAACC,KAAK,IAAI;MACnB,oBAAOzB,OAAA,CAAC0B,IAAI;QAACD,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI;MAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IACpC,CAAC,CAAC,eAEJvB,OAAA;MAAO2B,SAAS,EAAGC,CAAC,IAAK;QACrB,IAAIA,CAAC,CAACC,GAAG,IAAI,OAAO,EAAE;UACpB,IAAIC,UAAU,GAAG,CAAC,GAAGhB,OAAO,CAAC;UAC7BC,UAAU,CAACb,YAAY,CAAC,GAAG,OAAO;UAClCA,YAAY,EAAE;QAChB;MACF;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV;AAACV,EAAA,CApBQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAsBZ,SAASc,IAAIA,CAAC;EAAED;AAAM,CAAC,EAAE;EACvB,IAAIO,IAAI,GAAG,EAAE;EACb,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjC,SAAS,EAAEiC,CAAC,EAAE,EAAE;IAClCF,IAAI,gBAAGhC,OAAA;MAAKkB,SAAS,EAAC,KAAK;MAAAC,QAAA,EAAEM,KAAK,CAACS,CAAC;IAAC;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;IAC5CU,KAAK,CAACE,IAAI,CAACH,IAAI,CAAC;EAClB;EAEA,oBAAOhC,OAAA;IAAKkB,SAAS,EAAC,MAAM;IAAAC,QAAA,EAAEc;EAAK;IAAAb,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC5C;AAACa,GAAA,GATQV,IAAI;AAWb,eAAed,GAAG;AAAC,IAAAmB,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}