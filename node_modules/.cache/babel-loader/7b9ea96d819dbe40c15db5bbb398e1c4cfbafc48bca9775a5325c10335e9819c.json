{"ast":null,"code":"var _jsxFileName = \"/home/merouane/Desktop/wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GuessInput from './components/GuessInput';\nimport GuessList from './components/GuessList';\nimport GameStatus from './components/GameStatus';\nimport Header from './components/Header';\nimport { generateRandomWord, checkGuess } from './utils/wordUtils';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nfunction App() {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS);\n  const [gameStatus, setGameStatus] = useState('playing'); // playing, won, lost\n\n  useEffect(() => {\n    setTargetWord(generateRandomWord());\n  }, []);\n  const handleGuess = word => {\n    if (gameStatus !== 'playing') return;\n    const result = checkGuess(word, targetWord);\n    setGuesses([...guesses, {\n      word,\n      result\n    }]);\n    setAttemptsLeft(attemptsLeft - 1);\n    if (result.correct) {\n      setGameStatus('won');\n    } else if (attemptsLeft - 1 === 0) {\n      setGameStatus('lost');\n    }\n  };\n  useEffect(() => {\n    const savedGame = JSON.parse(localStorage.getItem('wordleGame'));\n    if (savedGame) {\n      setTargetWord(savedGame.targetWord);\n      setGuesses(savedGame.guesses);\n      setAttemptsLeft(savedGame.attemptsLeft);\n      setGameStatus(savedGame.gameStatus);\n    } else {\n      setTargetWord(generateRandomWord());\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('wordleGame', JSON.stringify({\n      targetWord,\n      guesses,\n      attemptsLeft,\n      gameStatus\n    }));\n  }, [targetWord, guesses, attemptsLeft, gameStatus]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n      onGuess: handleGuess,\n      disabled: gameStatus !== 'playing'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GuessList, {\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameStatus, {\n      status: gameStatus,\n      word: targetWord,\n      attemptsLeft: attemptsLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5SjIKY/t/X+89gt/XcLecNQJBhE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GuessInput","GuessList","GameStatus","Header","generateRandomWord","checkGuess","jsxDEV","_jsxDEV","MAX_ATTEMPTS","App","_s","targetWord","setTargetWord","guesses","setGuesses","attemptsLeft","setAttemptsLeft","gameStatus","setGameStatus","handleGuess","word","result","correct","savedGame","JSON","parse","localStorage","getItem","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGuess","disabled","status","_c","$RefreshReg$"],"sources":["/home/merouane/Desktop/wordle/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GuessInput from './components/GuessInput';\nimport GuessList from './components/GuessList';\nimport GameStatus from './components/GameStatus';\nimport Header from './components/Header';\nimport { generateRandomWord, checkGuess } from './utils/wordUtils';\nimport './App.css'\n\nconst MAX_ATTEMPTS = 6;\n\nfunction App() {\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS);\n  const [gameStatus, setGameStatus] = useState('playing'); // playing, won, lost\n\n  useEffect(() => {\n    setTargetWord(generateRandomWord());\n  }, []);\n\n  const handleGuess = (word) => {\n    if (gameStatus !== 'playing') return;\n\n    const result = checkGuess(word, targetWord);\n    setGuesses([...guesses, { word, result }]);\n    setAttemptsLeft(attemptsLeft - 1);\n\n    if (result.correct) {\n      setGameStatus('won');\n    } else if (attemptsLeft - 1 === 0) {\n      setGameStatus('lost');\n    }\n  };\n\n  useEffect(() => {\n    const savedGame = JSON.parse(localStorage.getItem('wordleGame'));\n    if (savedGame) {\n      setTargetWord(savedGame.targetWord);\n      setGuesses(savedGame.guesses);\n      setAttemptsLeft(savedGame.attemptsLeft);\n      setGameStatus(savedGame.gameStatus);\n    } else {\n      setTargetWord(generateRandomWord());\n    }\n  }, []);\n  \n  useEffect(() => {\n    localStorage.setItem('wordleGame', JSON.stringify({\n      targetWord,\n      guesses,\n      attemptsLeft,\n      gameStatus\n    }));\n  }, [targetWord, guesses, attemptsLeft, gameStatus]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <GuessInput onGuess={handleGuess} disabled={gameStatus !== 'playing'} />\n      <GuessList guesses={guesses} />\n      <GameStatus status={gameStatus} word={targetWord} attemptsLeft={attemptsLeft} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}