{"ast":null,"code":"var _jsxFileName = \"/home/lsemlali/OpenDevEd-Wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport words from \"./words.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_SIZE = 5;\nlet currentIndex = 0;\nconst randomIndex = Math.floor(Math.random() * words.length);\nconst wordToGuess = words[randomIndex].toUpperCase();\nconsole.log(wordToGuess);\nfunction App() {\n  _s();\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setCurrentGuess] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Wordle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), guesses.map(guess => {\n      return /*#__PURE__*/_jsxDEV(Line, {\n        guess: guess !== null && guess !== void 0 ? guess : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: () => {\n        if (currentGuess.length === 5) {\n          let newGuesses = [...guesses];\n          newGuesses[currentIndex] = currentGuess.toUpperCase();\n          setCurrentGuess('');\n          setGuesses(newGuesses);\n          currentIndex++;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"input\",\n      children: \"Guess:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      type: \"text\",\n      value: currentGuess,\n      onChange: e => {\n        const guess = e.target.value;\n        if (guess.length < 6 && guess.match(/^[a-zA-Z]*$/)) setCurrentGuess(e.target.value);\n      },\n      onKeyDown: e => {\n        if (e.key === 'Enter') {\n          if (currentGuess.length === 5) {\n            let newGuesses = [...guesses];\n            newGuesses[currentIndex] = currentGuess.toUpperCase();\n            setCurrentGuess('');\n            setGuesses(newGuesses);\n            currentIndex++;\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y+g00fZaZ6ziMSPm1SIwp+BBF7Q=\");\n_c = App;\nfunction Line({\n  guess\n}) {\n  let char = '';\n  let boxes = [];\n  let className = 'tile';\n  for (let i = 0; i < WORD_SIZE; i++) {\n    console.log(guess, '---', wordToGuess);\n    if (guess && wordToGuess[i] === guess[i]) className += ' correct';else if (guess && wordToGuess.includes(guess[i])) className += ' close';else if (guess) className += ' incorrect';\n    char = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: guess[i]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n    className = 'tile';\n    boxes.push(char);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\",\n    children: boxes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Line;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Line\");","map":{"version":3,"names":["useState","words","jsxDEV","_jsxDEV","WORD_SIZE","currentIndex","randomIndex","Math","floor","random","length","wordToGuess","toUpperCase","console","log","App","_s","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","Line","onSubmit","newGuesses","for","type","value","onChange","e","target","match","onKeyDown","key","_c","char","boxes","i","includes","push","_c2","$RefreshReg$"],"sources":["/home/lsemlali/OpenDevEd-Wordle/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport words from \"./words.json\"\nimport './App.css';\n\nconst WORD_SIZE = 5;\nlet currentIndex = 0;\nconst randomIndex = Math.floor(Math.random() * words.length);\nconst wordToGuess = words[randomIndex].toUpperCase();\nconsole.log(wordToGuess)\nfunction App() {\n  const [guesses, setGuesses] = useState(Array(6).fill(null));\n  const [currentGuess, setCurrentGuess] = useState('')\n\n  return (\n    <div className=\"App\">\n      <h1 className='title'>Wordle</h1>\n      {\n        guesses.map(guess => {\n          return <Line guess={guess ?? ''}/>\n        })\n      }\n      <form onSubmit={() => {\n        if (currentGuess.length === 5) {\n          let newGuesses = [...guesses];\n          newGuesses[currentIndex] = currentGuess.toUpperCase();\n          setCurrentGuess('');\n          setGuesses(newGuesses)\n          currentIndex++;\n        }\n      }}>\n        \n      </form>\n      <label for=\"input\">Guess:</label>\n      <input \n        className='input'\n        type='text'value={currentGuess} \n        onChange={(e) => {\n          const guess = e.target.value;\n          if (guess.length < 6 && guess.match(/^[a-zA-Z]*$/))\n            setCurrentGuess(e.target.value);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            if (currentGuess.length === 5) {\n              let newGuesses = [...guesses];\n              newGuesses[currentIndex] = currentGuess.toUpperCase();\n              setCurrentGuess('');\n              setGuesses(newGuesses)\n              currentIndex++;\n            }\n          }\n        }}>\n        </input>\n    </div>\n  );\n}\n\nfunction Line({ guess }) {\n  let char = ''\n  let boxes = []\n  let className = 'tile';\n  for (let i = 0; i < WORD_SIZE; i++) {\n    console.log(guess, '---', wordToGuess)\n    if (guess && wordToGuess[i] === guess[i])\n      className += ' correct';\n    else if (guess && wordToGuess.includes(guess[i]))\n      className += ' close';\n    else if (guess)\n      className += ' incorrect';\n    char = <div className={className}>{guess[i]}</div>;\n    className = 'tile';\n    boxes.push(char);\n  }\n\n  return <div className='line'>{boxes}</div>\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}