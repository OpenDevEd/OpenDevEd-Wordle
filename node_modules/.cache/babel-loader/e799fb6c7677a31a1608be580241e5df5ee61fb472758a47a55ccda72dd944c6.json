{"ast":null,"code":"var _jsxFileName = \"/home/merouane/Desktop/wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = '/words.json';\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nfunction App() {\n  _s();\n  const [solution, setSolution] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(null));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const handleType = useCallback(event => {\n    if (isGameOver) return;\n    if (event.key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      const newGuesses = [...guesses];\n      const emptyIndex = newGuesses.findIndex(val => val == null);\n      if (emptyIndex === -1) return;\n      newGuesses[emptyIndex] = currentGuess;\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n      if (solution === currentGuess) {\n        setIsGameOver(true);\n      } else if (emptyIndex === MAX_GUESSES - 1) {\n        setIsGameOver(true);\n      }\n    } else if (event.key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH) {\n      const isLetter = event.key.match(/^[a-z]$/i);\n      if (isLetter) {\n        setCurrentGuess(prev => prev + event.key.toLowerCase());\n      }\n    }\n  }, [currentGuess, isGameOver, solution, guesses]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleType);\n    return () => window.removeEventListener('keydown', handleType);\n  }, [handleType]);\n  useEffect(() => {\n    const fetchWords = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) {\n          throw new Error('Response was not ok');\n        }\n        const words = await response.json();\n        const randomWord = words[Math.floor(Math.random() * words.length)];\n        setSolution(randomWord.toLowerCase());\n      } catch (error) {\n        console.error('Failed to fetch words:', error);\n      }\n    };\n    fetchWords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), isGameOver && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: solution === guesses[guesses.findIndex(val => val === null) - 1] ? 'You won!' : 'Game Over'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: guesses.map((guess, i) => {\n        const isCurrentGuess = i === guesses.findIndex(val => val == null);\n        return /*#__PURE__*/_jsxDEV(Line, {\n          guess: isCurrentGuess ? currentGuess : guess !== null && guess !== void 0 ? guess : '',\n          isFinal: !isCurrentGuess && guess != null,\n          solution: solution\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bwZONibNN2aOBTElYAOVE1/yfqI=\");\n_c = App;\nfunction Line({\n  guess,\n  isFinal,\n  solution\n}) {\n  const tiles = [];\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    const char = guess[i];\n    let className = 'tile';\n    if (isFinal) {\n      if (char === solution[i]) {\n        className += ' correct';\n      } else if (solution.includes(char)) {\n        className += ' close';\n      } else {\n        className += ' incorrect';\n      }\n    }\n    tiles.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: char\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\",\n    children: tiles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Line;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Line\");","map":{"version":3,"names":["useEffect","useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","WORD_LENGTH","MAX_GUESSES","App","_s","solution","setSolution","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","isGameOver","setIsGameOver","handleType","event","key","length","newGuesses","emptyIndex","findIndex","val","prev","slice","isLetter","match","toLowerCase","window","addEventListener","removeEventListener","fetchWords","response","fetch","ok","Error","words","json","randomWord","Math","floor","random","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","i","isCurrentGuess","Line","isFinal","_c","tiles","char","includes","push","_c2","$RefreshReg$"],"sources":["/home/merouane/Desktop/wordle/src/App.js"],"sourcesContent":["import './App.css';\nimport { useEffect, useState, useCallback } from 'react';\n\nconst API_URL = '/words.json';\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nfunction App() {\n  const [solution, setSolution] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(null));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleType = useCallback((event) => {\n    if (isGameOver) return;\n\n    if (event.key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n\n      const newGuesses = [...guesses];\n      const emptyIndex = newGuesses.findIndex(val => val == null);\n      if (emptyIndex === -1) return;\n\n      newGuesses[emptyIndex] = currentGuess;\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n\n      if (solution === currentGuess) {\n        setIsGameOver(true);\n      } else if (emptyIndex === MAX_GUESSES - 1) {\n        setIsGameOver(true);\n      }\n    } else if (event.key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH) {\n      const isLetter = event.key.match(/^[a-z]$/i);\n      if (isLetter) {\n        setCurrentGuess(prev => prev + event.key.toLowerCase());\n      }\n    }\n  }, [currentGuess, isGameOver, solution, guesses]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleType);\n    return () => window.removeEventListener('keydown', handleType);\n  }, [handleType]);\n  \n  useEffect(() => {\n    const fetchWords = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) {\n          throw new Error('Response was not ok');\n        }\n        const words = await response.json();\n        const randomWord = words[Math.floor(Math.random() * words.length)];\n        setSolution(randomWord.toLowerCase());\n      } catch (error) {\n        console.error('Failed to fetch words:', error);\n      }\n    };\n    \n    fetchWords();\n  }, []);\n\n  return (\n    <div className=\"game-container\">\n      <h1>Wordle Clone</h1>\n      <></>\n      {isGameOver && <h2>{solution === guesses[guesses.findIndex(val => val === null) - 1] ? 'You won!' : 'Game Over'}</h2>}\n      <div className=\"board\">\n        {guesses.map((guess, i) => {\n          const isCurrentGuess = i === guesses.findIndex(val => val == null);\n          return (\n            <Line \n              key={i}\n              guess={isCurrentGuess ? currentGuess : guess ?? ''}\n              isFinal={!isCurrentGuess && guess != null}\n              solution={solution}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction Line({ guess, isFinal, solution }) {\n  const tiles = [];\n  \n  for (let i = 0; i < WORD_LENGTH; i++) {\n    const char = guess[i];\n    let className = 'tile';\n\n    if (isFinal) {\n      if (char === solution[i]) {\n        className += ' correct';\n      } else if (solution.includes(char)) {\n        className += ' close';\n      } else {\n        className += ' incorrect';\n      }\n    }\n\n    tiles.push(\n      <div key={i} className={className}>\n        {char}\n      </div>\n    );\n  }\n  \n  return <div className='line'>{tiles}</div>;\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}