{"ast":null,"code":"var _jsxFileName = \"/home/merouane/Desktop/wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WordInput from './components/WordInput';\nimport GuessDisplay from './components/GuessDisplay';\nimport GameOverModal from './components/GameOverModal';\nimport { generateRandomWord, checkGuess } from './utils/gameLogic';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\nfunction App() {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [remainingAttempts, setRemainingAttempts] = useState(MAX_ATTEMPTS);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  useEffect(() => {\n    setTargetWord(generateRandomWord());\n  }, []);\n  const handleGuess = guess => {\n    if (guess.length !== WORD_LENGTH || !/^[a-zA-Z]+$/.test(guess)) {\n      alert('Please enter a valid 5-letter word.');\n      return;\n    }\n    const guessResult = checkGuess(guess, targetWord);\n    const newGuesses = [...guesses, guessResult];\n    setGuesses(newGuesses);\n    setRemainingAttempts(remainingAttempts - 1);\n    if (guess === targetWord) {\n      setGameWon(true);\n      setGameOver(true);\n    } else if (remainingAttempts === 1) {\n      setGameOver(true);\n    }\n  };\n  const resetGame = () => {\n    setTargetWord(generateRandomWord());\n    setGuesses([]);\n    setRemainingAttempts(MAX_ATTEMPTS);\n    setGameOver(false);\n    setGameWon(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GuessDisplay, {\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordInput, {\n      onGuess: handleGuess,\n      disabled: gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Remaining attempts: \", remainingAttempts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(GameOverModal, {\n      won: gameWon,\n      targetWord: targetWord,\n      onRestart: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+P/QfBVKoyT2jM2bYrQjPrEoilk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WordInput","GuessDisplay","GameOverModal","generateRandomWord","checkGuess","jsxDEV","_jsxDEV","MAX_ATTEMPTS","WORD_LENGTH","App","_s","targetWord","setTargetWord","guesses","setGuesses","remainingAttempts","setRemainingAttempts","gameOver","setGameOver","gameWon","setGameWon","handleGuess","guess","length","test","alert","guessResult","newGuesses","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGuess","disabled","won","onRestart","_c","$RefreshReg$"],"sources":["/home/merouane/Desktop/wordle/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WordInput from './components/WordInput';\nimport GuessDisplay from './components/GuessDisplay';\nimport GameOverModal from './components/GameOverModal';\nimport { generateRandomWord, checkGuess } from './utils/gameLogic';\nimport './App.css';\n\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\n\nfunction App() {\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [remainingAttempts, setRemainingAttempts] = useState(MAX_ATTEMPTS);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n\n  useEffect(() => {\n    setTargetWord(generateRandomWord());\n  }, []);\n\n  const handleGuess = (guess) => {\n    if (guess.length !== WORD_LENGTH || !/^[a-zA-Z]+$/.test(guess)) {\n      alert('Please enter a valid 5-letter word.');\n      return;\n    }\n\n    const guessResult = checkGuess(guess, targetWord);\n    const newGuesses = [...guesses, guessResult];\n    setGuesses(newGuesses);\n    setRemainingAttempts(remainingAttempts - 1);\n\n    if (guess === targetWord) {\n      setGameWon(true);\n      setGameOver(true);\n    } else if (remainingAttempts === 1) {\n      setGameOver(true);\n    }\n  };\n\n  const resetGame = () => {\n    setTargetWord(generateRandomWord());\n    setGuesses([]);\n    setRemainingAttempts(MAX_ATTEMPTS);\n    setGameOver(false);\n    setGameWon(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Wordle Clone</h1>\n      <GuessDisplay guesses={guesses} />\n      <WordInput onGuess={handleGuess} disabled={gameOver} />\n      <p>Remaining attempts: {remainingAttempts}</p>\n      {gameOver && (\n        <GameOverModal\n          won={gameWon}\n          targetWord={targetWord}\n          onRestart={resetGame}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}