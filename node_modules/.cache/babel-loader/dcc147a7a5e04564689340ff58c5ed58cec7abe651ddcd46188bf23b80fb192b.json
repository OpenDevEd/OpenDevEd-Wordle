{"ast":null,"code":"const WORDS = ['APPLE', 'BANANA', 'CHERRY', 'GRAPE', 'LEMON']; // Add more words or fetch from an API\n\nexport const generateRandomWord = () => {\n  return WORDS[Math.floor(Math.random() * WORDS.length)];\n};\nexport const checkGuess = (guess, targetWord) => {\n  let feedback = Array(guess.length).fill(''); // Initialize feedback array\n\n  // First pass: Check for correct letters in correct positions\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === targetWord[i]) {\n      feedback[i] = 'correct-position';\n    }\n  }\n\n  // Second pass: Check for correct letters in wrong positions\n  for (let i = 0; i < guess.length; i++) {\n    if (feedback[i] === '') {\n      if (targetWord.includes(guess[i])) {\n        feedback[i] = 'wrong-position';\n      } else {\n        feedback[i] = 'incorrect-position';\n      }\n    }\n  }\n  return {\n    correct: guess === targetWord,\n    feedback\n  };\n};","map":{"version":3,"names":["WORDS","generateRandomWord","Math","floor","random","length","checkGuess","guess","targetWord","feedback","Array","fill","i","includes","correct"],"sources":["/home/merouane/Desktop/wordle/src/utils/wordUtils.js"],"sourcesContent":["const WORDS = ['APPLE', 'BANANA', 'CHERRY', 'GRAPE', 'LEMON']; // Add more words or fetch from an API\n\nexport const generateRandomWord = () => {\n  return WORDS[Math.floor(Math.random() * WORDS.length)];\n};\n\nexport const checkGuess = (guess, targetWord) => {\n    let feedback = Array(guess.length).fill(''); // Initialize feedback array\n    \n    // First pass: Check for correct letters in correct positions\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === targetWord[i]) {\n        feedback[i] = 'correct-position';\n      }\n    }\n  \n    // Second pass: Check for correct letters in wrong positions\n    for (let i = 0; i < guess.length; i++) {\n      if (feedback[i] === '') {\n        if (targetWord.includes(guess[i])) {\n          feedback[i] = 'wrong-position';\n        } else {\n          feedback[i] = 'incorrect-position';\n        }\n      }\n    }\n  \n    return { correct: guess === targetWord, feedback };\n  };"],"mappings":"AAAA,MAAMA,KAAK,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;;AAE/D,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAOD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;AACxD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EAC7C,IAAIC,QAAQ,GAAGC,KAAK,CAACH,KAAK,CAACF,MAAM,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE7C;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACF,MAAM,EAAEO,CAAC,EAAE,EAAE;IACrC,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAKJ,UAAU,CAACI,CAAC,CAAC,EAAE;MAC9BH,QAAQ,CAACG,CAAC,CAAC,GAAG,kBAAkB;IAClC;EACF;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACF,MAAM,EAAEO,CAAC,EAAE,EAAE;IACrC,IAAIH,QAAQ,CAACG,CAAC,CAAC,KAAK,EAAE,EAAE;MACtB,IAAIJ,UAAU,CAACK,QAAQ,CAACN,KAAK,CAACK,CAAC,CAAC,CAAC,EAAE;QACjCH,QAAQ,CAACG,CAAC,CAAC,GAAG,gBAAgB;MAChC,CAAC,MAAM;QACLH,QAAQ,CAACG,CAAC,CAAC,GAAG,oBAAoB;MACpC;IACF;EACF;EAEA,OAAO;IAAEE,OAAO,EAAEP,KAAK,KAAKC,UAAU;IAAEC;EAAS,CAAC;AACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}